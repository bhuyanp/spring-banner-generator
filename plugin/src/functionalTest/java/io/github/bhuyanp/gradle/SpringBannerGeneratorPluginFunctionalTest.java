/*
 * This source file was generated by the Gradle 'init' task
 */
package io.github.bhuyanp.gradle;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.BuildTask;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Scanner;

import static org.assertj.core.api.Assertions.assertThat;


class SpringBannerGeneratorPluginFunctionalTest {
    final String PROJECT_NAME = "test-app";

    @TempDir
    Path projectDir;
    Path settingsFile;
    Path buildFile;


    @BeforeEach
    void setUp() {
        settingsFile = projectDir.resolve("settings.gradle");
        writeString(settingsFile, "rootProject.name = '" + PROJECT_NAME + "'");
        buildFile = projectDir.resolve("build.gradle.kts");
        // language=groovy
        writeString(buildFile, """
                plugins {
                    java
                    id("org.springframework.boot").version("3.4.5")
                    id("io.spring.dependency-management").version("1.1.7")
                    id("io.github.bhuyanp.spring-banner-generator")
                }
                version = "1.0"
                dependencies {
                    implementation("org.springframework.boot:spring-boot-starter")
                    testImplementation("org.springframework.boot:spring-boot-starter-test")
                    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
                }
                springBanner {
                    text = "Funky Banner"
                    bannerFonts = listOf("ansiregular")
                }
                """);
    }

    void writeString(Path file, String text) {
        try {
            Files.deleteIfExists(file);
            Files.write(file, text.getBytes(), StandardOpenOption.CREATE_NEW);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    void appendString(Path file, String text) {
        try {
            Files.write(file, text.getBytes(), StandardOpenOption.APPEND);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }

    void build(String text) {
        appendString(buildFile, text);
    }

    GradleRunner gradleRunner() {
        return GradleRunner.create()
                .withProjectDir(projectDir.toFile())
                .withPluginClasspath();
    }

    @Test
    void should_printBanner() {
        BuildResult result = gradleRunner()
                .withArguments("printBanner")
                .build();
        assertThat(result.task(":printBanner"))
                .as("task :printBanner")
                .isNotNull()
                .extracting(BuildTask::getOutcome)
                .as("task outcome")
                .isEqualTo(TaskOutcome.SUCCESS);
        System.out.println(result.getOutput());
        assertThat(result.getOutput())
                .contains("Banner font")
                .contains("Banner padding")
                .contains("Version: 1.0");

    }

    @Test
    void should_generateBanner() throws URISyntaxException, FileNotFoundException {
        //given
        URL resource = this.getClass().getClassLoader().getResource("banner.txt");
        assertThat(resource)
                .as("banner.txt")
                .isNotNull();
        Path expectedBanner = Paths.get(resource.toURI());

        //when
        gradleRunner()
                .withArguments("generateBanner")
                .build();
        Path banner = projectDir.resolve("build/resources/main/banner.txt");

        //then
        assertThat(banner)
                .as("build/resources/main/banner.txt")
                .exists();
        assertThat(readFile(banner.toFile()))
                .contains("Version: 1.0")
                .contains("███████ ██    ██ ███    ██ ██   ██ ██    ██     ██████   █████  ███    ██ ███    ██ ███████ ██████");

    }


    private String readFile(File file){
        try {
            StringBuilder str = new StringBuilder();
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                str.append(scanner.nextLine()).append(System.lineSeparator());
            }
            scanner.close();
            return str.toString();
        } catch (FileNotFoundException e) {
           throw new RuntimeException("Unable to read generated banner.txt");
        }
    }
    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
